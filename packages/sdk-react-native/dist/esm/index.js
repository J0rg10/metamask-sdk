import e,{createContext as t,useState as n,useEffect as a,useRef as r,useContext as c}from"react";import{NativeModules as o,Platform as s,Linking as i,Alert as d}from"react-native";import l from"@react-native-async-storage/async-storage";const{MetaMaskReactNativeSdk:h}=o,p=()=>h.chainId(),u=()=>h.selectedAddress();function y(e){const t={dappName:e.dappMetadata.name,dappUrl:e.dappMetadata.url,dappIconUrl:e.dappMetadata.iconUrl,dappScheme:e.dappMetadata.scheme,infuraAPIKey:e.infuraAPIKey};h.initialize(t),function(){if("ios"===s.OS){const e=e=>{const{url:t}=e;try{if(!t||"string"!=typeof t)return;const e=t.split("://");if(e.length<2)return;const n=e[1].split("?");if(0===n.length||!n[0])return;"mmsdk"===n[0]&&h.handleDeepLink(t)}catch(e){console.error(`MetaMaskReactNativeSdk.handleOpenURL() => Error handling URL ${t} `,e)}};i.addEventListener("url",e)}}()}const g=t({ready:!1,connected:!1,connecting:!1}),m=({children:t,sdkOptions:c})=>{const[o,s]=n(!1),[i,l]=n(!1),[m,f]=n(!1),[w,v]=n(),[S,A]=n(),I=async()=>{const e=await u(),t=await p();A(e||void 0),v(t||void 0)},P=r(!1);return a((()=>{P.current||(y(c),P.current=!0,s(!0))}),[c]),a((()=>{if(!o)return;(async()=>{const e=await u(),t=await p();f(Boolean(e)),A(e||void 0),v(t||void 0)})().catch((e=>{console.error("MetaMaskProviderClient:: Error onReady =>",e)}))}),[o]),e.createElement(g.Provider,{value:{sdk:{connect:async()=>{l(!0);const e=await(async()=>h.connect())();return await I(),f(!0),l(!1),e},connectAndSign:async({msg:e})=>{l(!0);const t=await(async e=>h.connectAndSign(e))(e);return await I(),f(!0),l(!1),t},connectWith:async e=>{l(!0);const t=await(async e=>h.connectWith(e))(e);return await I(),f(!0),l(!1),t},terminate:async()=>{await(async()=>h.clearSession())(),A(void 0),v(void 0),f(!1),l(!1)}},provider:{request:async e=>{try{const t=await(async e=>h.request(e))(e);return t}catch(e){throw"The selected account or chain has changed. Please try again."===e.message&&d.alert("Action Required","The selected account or chain has changed. Please try again."),e}finally{await I()}},batchRequest:async e=>{try{const t=await(async e=>h.batchRequest(e))(e);return await I(),t}catch(e){throw"The selected account or chain has changed. Please try again."===e.message&&d.alert("Error","The selected account or chain has changed. Please try again."),e}finally{await I()}},getSelectedAddress:u,getChainId:p},ready:o,connected:m,connecting:i,account:S,chainId:w}},t)},f=({children:t,sdkOptions:r})=>{const[c,o]=n(!1);return a((()=>{o(!0)}),[]),e.createElement(e.Fragment,null,c?e.createElement(m,{sdkOptions:r},t):e.createElement(e.Fragment,null,t))},w={dappMetadata:{name:"My DApp",url:"https://mydapp.com",iconUrl:"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png",scheme:"mydapp"}},v=t({...w,setAppContext:e=>{},reset:()=>{}}),S="appContext",A=({initialInfuraKey:t,children:r})=>{const[c,o]=n({...w,infuraAPIKey:t});a((()=>{(async()=>{try{const e=await l.getItem(S),n=e?JSON.parse(e):{infuraAPIKey:t};n.infuraAPIKey||(n.infuraAPIKey=t);const a={...w,...n};o(a)}catch(e){console.error("Error loading context from AsyncStorage:",e)}})().catch((e=>{console.error("Error loading context from AsyncStorage:",e)}))}),[]);const s=e=>{o((t=>{const n={...t,...e};return(async e=>{try{const t=new URLSearchParams;for(const[n,a]of Object.entries(e))t.set(n,encodeURIComponent(JSON.stringify(a)));await l.setItem(S,JSON.stringify(e))}catch(e){console.error("Error syncing state to AsyncStorage:",e)}})(n).catch((e=>{console.error("Error syncing state to AsyncStorage:",e)})),setTimeout((()=>{console.log("[SDKConfigProvider] Context updated",n)}),100),n}))},i={...c,reset:()=>{s({...w,infuraAPIKey:t})},setAppContext:s};return e.createElement(v.Provider,{value:i},r)},I=()=>{const e=c(g);if(void 0===e)throw new Error("SDK context is missing, must be within provider");return e},P=()=>{const e=c(v);if(void 0===e)throw new Error("useSDKConfig must be used within a SDKConfigContext");return e};export{f as MetaMaskProvider,v as SDKConfigContext,A as SDKConfigProvider,g as SDKContext,I as useSDK,P as useSDKConfig};
//# sourceMappingURL=index.js.map
